const cafeLocations = [
  { name: "Ammis bakverk", address: "Storgatan 5, Stockholm", city: "Stockholm", county: "Stockholms l칛n" },
  { name: "Ammis bakverk", address: "S칬dra V칛gen 10, G칬teborg", city: "G칬teborg", county: "V칛stra G칬talands l칛n" },
  { name: "Ammis bakverk", address: "Lilla Torg 3, Malm칬", city: "Malm칬", county: "Sk친ne l칛n" },
  { name: "Ammis bakverk", address: "Hamngatan 12, Ume친", city: "Ume친", county: "V칛sterbottens l칛n" },
  { name: "Ammis bakverk", address: "Storgatan 8, Lule친", city: "Lule친", county: "Norrbottens l칛n" },
  { name: "Ammis bakverk", address: "Kyrkogatan 1, Uppsala", city: "Uppsala", county: "Uppsala l칛n" },
  { name: "Ammis bakverk", address: "칐stra Promenaden 4, Norrk칬ping", city: "Norrk칬ping", county: "칐sterg칬tlands l칛n" },
  { name: "Ammis bakverk", address: "Stora Torget 2, V칛xj칬", city: "V칛xj칬", county: "Kronobergs l칛n" },
  { name: "Ammis bakverk", address: "Drottninggatan 20, Karlstad", city: "Karlstad", county: "V칛rmlands l칛n" },
  { name: "Ammis bakverk", address: "Kungsgatan 18, 칐rebro", city: "칐rebro", county: "칐rebro l칛n" },
  { name: "Ammis bakverk", address: "Storgatan 15, Sundsvall", city: "Sundsvall", county: "V칛sternorrlands l칛n" }
];


    let map;

   async function findCafe() {
  const input = document.getElementById("locationInput").value.trim().toLowerCase();
  const resultDiv = document.getElementById("result");

  const cleanedInput = input.replace("l칛n", "").trim();

  const matchedCafe = cafeLocations.find(cafe => {
    const county = cafe.county.toLowerCase().replace("l칛n", "").trim();
    const city = cafe.city.toLowerCase().trim();
    return county.includes(cleanedInput) || city.includes(cleanedInput) || cleanedInput.includes(city);
  });

  if (!matchedCafe) {
    resultDiv.innerHTML = "Inget kaf칠 hittades i detta omr친de.";
    if (map) map.remove();
    return;
  }

const location = matchedCafe.address;
resultDiv.innerHTML = `<strong>${matchedCafe.name}</strong><br>${location}`;

// 游리 L칛gg till detta direkt efter att resultatet visas:
if (window.loadMenuForCafe) {
  loadMenuForCafe(matchedCafe.city.toLowerCase());
}

  const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(location)}&addressdetails=1`);
  const data = await response.json();

  if (data.length === 0) {
    resultDiv.innerHTML += "<br>Ingen karta kunde visas f칬r denna adress.";
    return;
  }

  const { lat, lon } = data[0];

  if (map) {
    map.setView([lat, lon], 14);
  } else {
    map = L.map('map').setView([lat, lon], 14);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);
  }

  if (window.lastMarker) {
    map.removeLayer(window.lastMarker);
  }

  window.lastMarker = L.marker([lat, lon]).addTo(map)
    .bindPopup(`${matchedCafe.name}<br>${location}`)
    .openPopup();
}
